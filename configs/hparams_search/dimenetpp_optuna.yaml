# @package _global_

# example hyperparameter optimization of some experiment with Optuna:
# python train.py -m hparams_search=mnist_optuna experiment=example

defaults:
  - override /model: dimenetpp
  - override /optimizer: adam
  - override /datamodule: graphdatamodule_split
  - override /scheduler: warmupcosinedecay_annealing
  - override /logger:
      - csv
      - wandb
  - override /hydra/sweeper: optuna

tags: ["dimenet++_hyper"]

plmodule:
  predict_key: "e_formation"

datamodule:
  module:
    num_workers: 4
    pin_memory: false

  files:
    hdf5_path:
      [
        "/data/g_x_charge.hdf5",
        "/data/g_x_pot_charge.hdf5",
        "/data/g_x_random_charge.hdf5",
      ]

  train_dataset:
    property_names: ["e_formation"]
    pbc: True
    specific_atom_numbers: [6]
    atom_numbers: [
        1,
        # 2,
        3,
        4,
        5,
        # 6,
        7,
        8,
        9,
        # 10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        # 18,
        19,
        # 20,
        21,
        22,
        23,
        24,
        25,
        # 26,
        27,
        28,
        # 29,
        30,
        31,
        32,
        33,
        34,
        # 35,
      ]

  val_dataset:
    property_names: ["e_formation"]
    pbc: True
    specific_atom_numbers: null
    atom_numbers: [20, 26, 29, 35]

model:
  edge_message_dim: 256
  n_interaction: 6
  out_dim: 1
  n_radial: 16
  n_spherical: 4
  edge_down_dim: 64
  basis_embed_dim: 64
  out_up_dim: 256
  activation: "swish"
  envelope_exponent: 5
  aggr: "add"
  weight_init: "glorot_orthogonal"
  share_weight: false
  max_z: 57

training:
  device: gpu
  n_device: 1
  amp_level: null # nullable
  batch_size: 32
  max_epochs: 500
  lr: 1e-5
  weight_decay: 0.0

params:
  cutoff_radi: 4.0

logger:
  wandb:
    project: "pyggnns"
    tags:
      [
        "dimenet++",
        "cutoff_radi=${params.cutoff_radi}",
        "graphene_x",
        "g_x_pot",
        "g_x_random",
        "g_x_stable",
      ]

# choose metric which will be optimized by Optuna
# make sure this is the correct name of some metric logged in lightning module!
optimized_metric: "val/loss"

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  mode: "MULTIRUN" # set hydra to multirun by default if this config is attached

  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # storage URL to persist optimization results
    # for example, you can use SQLite if you set 'sqlite:///example.db'
    storage: null

    # name of the study to persist optimization results
    study_name: null

    # number of parallel workers
    n_jobs: 1

    # 'minimize' or 'maximize' the objective
    direction: minimize

    # total number of runs that will be executed
    n_trials: 50

    # choose Optuna hyperparameter sampler
    # you can choose bayesian sampler (tpe), random search (without optimization), grid sampler, and others
    # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: 42
      n_startup_trials: 10 # number of random sampling runs before optimization starts

    # define hyperparameter search space
    params:
      training.lr: tag(log, interval(0.00001, 0.001))
      training.batch_size: choice(32, 64, 128, 256)
      params.cutoff_radi: choice(3., 3.5, 4., 4.5, 5.)
      model.edge_message_dim: choice(64, 128, 256, 512)
      model.n_interaction: range(3, 8)
      model.n_radial: choice(8, 16, 32)
      model.n_spherical: choice(4, 8, 16)
      model.edge_down_dim: choice(32, 64, 128, 256)
      model.basis_embed_dim: choice(32, 64, 128, 256)
      model.out_up_dim: choice(32, 64, 128, 256)
      model.envelope_exponent: range(3, 6)
